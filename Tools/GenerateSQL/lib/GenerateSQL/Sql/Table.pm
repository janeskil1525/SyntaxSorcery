use v5.40;
use feature 'class';
no warnings 'experimental::class';

class GenerateSQL::Sql::Table :isa(GenerateSQL::Sql::Base::Common){
    field $sql :reader = '';

    method generate_table() {

        if (exists($self->json->{tables})) {
            my $tables = $self->json->{tables};
            my $len = scalar @{$tables};
            for(my $j = 0; $j < $len; $j++){
                my $table = $self->shift_section($tables);
                $sql .= $self->create_table_sql($table);
            }
        }
    }

    method create_table_sql($table) {
        my $result = "";
        my $fields = '';
        my $indexes = '';
        my $foreignkeys = "";


        my $name = $table->{table}->{name};
        if (exists($table->{table}->{fields})) {
            $fields = $self->create_fields($table->{table}->{fields});
            $foreignkeys = $self->create_fkeys($table->{table}->{fields});
        }

        if (exists($table->{table}->{index})) {
            $indexes = $self->create_index($table->{table}->{index})
        }


        $result =~ s/<<tablename>>/$name/ig;
        $result =~ s/<<fields>>/$fields/ig;
        my $test = 1;

    }





    method create_index($index) {
        my $result = '';
    }

    method create_fkeys($fields) {
        my $result = "";
        while (my ($key, $value) = each %{$fields}) {
            if (index($key,'_fkey')>-1) {

            }

        }
        return $ressult;
    }
}




1;
#################### pod generated by Pod::Autopod - keep this line to make pod updates possible ####################

=head1 NAME

lib::GenerateSQL::Sql::Table - lib::GenerateSQL::Sql::Table


=head1 REQUIRES

L<feature> 

L<v5.40> 


=head1 METHODS


=cut

